 context.modules = [
{   name = libpipewire-module-filter-chain
    args = {
        node.description =  "Noise + Echo Canceling source"
        media.name =  "Noise Canceling source"
        filter.graph = {
            nodes = [
                {
                    type = ladspa
                    name = rnnoise
                    plugin = /usr/lib/ladspa/librnnoise_ladspa.so
                    label = noise_suppressor_mono
                    control = {
                        "VAD Threshold (%)" = 95.0
                        "VAD Grace Period (ms)" = 200
                        "Retroactive VAD Grace (ms)" = 0
                    }
                }
            ]
        }
        capture.props = {
            node.name =  "capture.rnnoise_source"
            node.passive = true
            audio.rate = 48000
        }
        playback.props = {
            node.name =  "rnnoise_source"
            media.class = Audio/Source
            audio.rate = 48000
        }
    }
}
{   name = libpipewire-module-echo-cancel
      args = {
          library.name  = aec/libspa-aec-webrtc
          aec.args = {
              webrtc.gain_control = true
          }
          # node.latency = 1024/48000

          capture.props = {
             # This is where the raw local microphone signal is really coming from
             # It should be connected to real local hardware microphones
             #
             # Note: node.name and node.description seem to be ignored for this stream (01/2023)
             node.name = "Echo Cancellation MyCapture"
             node.description = "Echo Cancellation MyCapture"
             audio.channels = 2
             audio.position = [ AUX7 AUX6 ]
             target.object = "alsa_input.usb-Blue_Microphones_Yeti_Stereo_Microphone_797_2018_11_08_93567-00.analog-stereo"
             node.passive = true
          }
          sink.props = {
             # This is the virtual output device available to applications.
             # It is what the communication application should use to play sound locally.
             node.name = "Echo Cancellation Sink"
             node.description "Altavoces, no echo"
          }
          playback.props = {
            # This is the local speaker we are really sending the audio to that is coming from the application.
            # Note that ideally this should be a real hardware audio output, that is on the same clock as the real hardware microphones!
            node.name = "Echo Cancellation MyPlayback"
            node.description "Echo Cancellation MyPlayback"
            node.passive = true
            audio.channels = 2
            audio.position = [ AUX3 AUX2 ]
            target.object = "alsa_output.pci-0000_0a_00.4.analog-stereo"
          }
    }

]
